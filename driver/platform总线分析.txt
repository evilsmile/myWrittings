1. Platform总线
   Platform总线是linux2.6内核加入的一种虚拟总线。platform机制的本身使用并不复杂，由两部分组成：platform_device和platform_driver。
   Platform驱动与传统的设备驱动模型相比，优势在于platform机制将设备本身的资源注册进内核，由内核统一管理，在驱动程序使用这些资源时使用统一的接口，这样提高了程序的可移植性。

2. 平台设备描述
   平台设备使用struct platform_device来描述：
     struct platform_device{
	     const char *name;  /* 设备名 */
	     int id; /* 设备编号，配合设备名使用 */
	     struct device dev;
	     u32 num_resources;
	     struct resource *resource; /* 设备资源 */
     };

     struct platform_device的分配使用：
      struct platform_device *platform_device_alloc(const char *name, int id);
     参数：
       name: 设备名
       id: 设备id名，一般为-1.

3. 平台设备注册
    注册平台设备，使用函数：
      int platform_device_add(struct platform_device *pdev);
4. 设备资源
     平台设备资源使用struct resource来描述：
       struct resource{
	       resource_size_t start;  /* 资源的起始物理地址 */
	       resource_size_t end;  /* 资源的结束物理地址 */
	       const char *name; /* 资源的名称 */
	       unsigned long flags; /* 资源的类型，如MEM、IO、IRQ */
	       struct resource *parent, *sibling, *child; /* 资源链表指针 */
       };
5. 获取资源
   struct resourn *platform_get_resource(struct platform_device *dev, unsigned int type, unsigned int num);
     dev: 资源所属的设备
     type: 资源的类型
     num: 资源的数量

6. 平台驱动描述
  平台驱动使用struct platform_driver描述：
     struct platform_driver{
	     int (*probe)(struct platform_device *);
	     int (*remove)(struct platform_device *);
	     void (*shutdown)(struct platform_device *);
	     int (*suspend)(struct platform_device *, pm_message_t state);
	     int (*suspend_late)(struct platform_device *, pm_message_t state);
	     int (*resume_early)(struct platform_device *);
	     int (*resume)(struct platform_device *);
	     struct device_driver driver;
     };
7. 平台驱动注册：
    int platform_driver_register(struct platform_driver*);
