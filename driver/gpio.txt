  GPIO(General Purpose I/O Ports)意思为通用输入/输出端口，通俗地说，就是一些引脚，可以通过它们输出高低电平或者通过它们读入引脚的状态---是高电平还是低电平。
  S3C2410有117个I/O端口，共分为A~H共8组：GPA、GPB、...、GPH。S3C2440有130个I/O端口，分为A~J共9组：GPA、GPB、...、GPJ。可以通过设置寄存器来确定某个引脚用于输入、输出还是其他特殊功能。比如可以设置GPH6作为一般地输入、输出引脚，或者用于串口。
  GPIO的操作是所有硬件操作的基础，由此扩展开来可以了解所有硬件的操作，这是底层开发人员必须掌握的。
  单个引脚的操作无外乎3种：输出高低电平、检测引脚状态、中断。对某个引脚的操作一般通过读、写寄存器来完成。
  并非只能通过寄存器才能发出硬件信号，实际上，通过访问总线的方式控制硬件更觉。

=========================================================================

在嵌入式设备中对GPIO的操作是最基本的操作。一般做法是写一个单独驱动程序，网上大多数例子都是这样的。其实linux下面有一个通用的GPIO操作接口，那就是/sys/class/gpio。
首先如果没有该文件夹的话要在编译内核的时候加入Device Drivers->GPOI Support。
/sys/class/gpio 的使用说明：
01 gpio_operation 通过/sys/文件接口操作IO端口 GPIO到文件系统的映射
02 * 控制GPIO的目录位于/sys/class/gpio
03 * /sys/class/gpio/export文件用于通知系统需要导出控制的GPIO引脚编号
04 * /sys/class/gpio/unexport 用于通知系统取消导出
05 * /sys/class/gpio/gpiochipX目录保存系统中GPIO寄存器的信息，包括每个寄存器控制引脚的起始编号base，寄存器名称，引脚总数 导出一个引脚的操作步骤
06 * 首先计算此引脚编号，引脚编号 = 控制引脚的寄存器基数 + 控制引脚寄存器位数
07 * 向/sys/class/gpio/export写入此编号，比如12号引脚，在shell中可以通过以下命令实现，命令成功后生成/sys/class/gpio/gpio12目录，如果没有出现相应的目录，说明此引脚不可导出：
08 echo 12 > /sys/class/gpio/export
09 * direction文件，定义输入输入方向，可以通过下面命令定义为输出
10 echo out > direction
11 * direction接受的参数：in, out, high, low。high/low同时设置方向为输出，并将value设置为相应的1/0。
12 * value文件是端口的数值，为1或0.
13 echo 1 > value

如：
取得GPIO信息，在终端中敲入以下命令：
	1 $ cd /sys/class/gpio
	2 $ for i in gpiochip* ; do echo `cat $i/label`: `cat $i/base` ; done
终端中显示如下

	1 GPIOA: 0
	2 GPIOE: 128
	3 GPIOF: 160
	4 GPIOG: 192
	5 GPIOH: 224
	6 GPIOB: 32
	7 GPIOC: 64
	8 GPIOD: 96
计算GPIO号码
我们把GPE11用来控制LED。
GPE0的头是128，GPE11 就是128+11 = 139.
	1 $ echo 139 > /sys/class/gpio/export
	   ls 一下看看有没有 gpio139 这个目录

	2.GPIO控制测试。 控制LED所以是输出。 所以我们应该执行
	    $ echo out > /sys/class/gpio/gpio139/direction 之后就可以进行输出设置了。
            $ echo 1 > /sys/class/gpio/gpio139/value 
			     or
   	    $ echo 0 > /sys/class/gpio/gpio139/value
