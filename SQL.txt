1. SQL SELECT DISTINCT 语句
在表中，可能会包含重复值。这并不成问题，不过，有时您也许希望仅仅列出不同（distinct）的值。
关键词 DISTINCT 用于返回唯一不同的值。
语法：
SELECT DISTINCT 列名称 FROM 表名称

2.WHERE 子句
如需有条件地从表中选取数据，可将 WHERE 子句添加到 SELECT 语句。
语法
SELECT 列名称 FROM 表名称 WHERE 列 运算符 值
下面的运算符可在 WHERE 子句中使用：
操作符	描述
  =		等于
  <>	不等于
  >		大于
  <		小于
  >=	大于等于
  <=	小于等于
 BETWEEN	在某个范围内
  LIKE	搜索某种模式

3. AND 和 OR 运算符
AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。
如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。
如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。

4. ORDER BY 语句
ORDER BY 语句用于根据指定的列对结果集进行排序。
ORDER BY 语句默认按照升序对记录进行排序。
如果您希望按照降序对记录进行排序，可以使用 DESC 关键字。
 也可用多个列综合排序，如：
     SELECT Company, OrderNumber FROM Orders ORDER BY Company, OrderNumber

5. INSERT INTO 语句
INSERT INTO 语句用于向表格中插入新的行。
语法:
INSERT INTO 表名称 VALUES (值1, 值2,....)
我们也可以指定所要插入数据的列：
INSERT INTO table_name (列1, 列2,...) VALUES (值1, 值2,....)

6. Update 语句
Update 语句用于修改表中的数据。
语法：
UPDATE 表名称 SET 列名称 = 新值,[列名称=新值]  WHERE 列名称 = 某值

7.DELETE 语句
DELETE 语句用于删除表中的行。
语法
DELETE FROM 表名称 WHERE 列名称 = 值
另外可以删除所有行, 可以在不删除表的情况下删除所有的行。这意味着表的结构、属性和索引都是完整的： DELETE FROM table_name 

8. TOP 子句
TOP 子句用于规定要返回的记录的数目。
对于拥有数千条记录的大型表来说，TOP 子句是非常有用的。
注释：并非所有的数据库系统都支持 TOP 子句。
SQL Server 的语法：
SELECT TOP number|percent column_name(s) FROM table_name
MySQL 语法
SELECT column_name(s) FROM table_name LIMIT number
Oracle 语法
SELECT column_name(s) FROM table_name WHERE ROWNUM <= number

9. LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
LIKE 操作符
LIKE 操作符用于在 WHERE 子句中搜索列中的指定模式。
SQL LIKE 操作符语法
SELECT column_name(s) FROM table_name WHERE column_name LIKE pattern 
提示："%" 可用于定义通配符（模式中缺少的字母）

10. 在搜索数据库中的数据时，您可以使用 SQL 通配符。
SQL 通配符
在搜索数据库中的数据时，SQL 通配符可以替代一个或多个字符。
SQL 通配符必须与 LIKE 运算符一起使用。
在 SQL 中，可使用以下通配符：
通配符	描述
%	替代一个或多个字符
_	仅替代一个字符
[charlist]	字符列中的任何单一字符
[^charlist]
或者
[!charlist]

11. IN 操作符
IN 操作符允许我们在 WHERE 子句中规定多个值。
SQL IN 语法
SELECT column_name(s) FROM table_name WHERE column_name IN (value1,value2,...)

12. BETWEEN 操作符在 WHERE 子句中使用，作用是选取介于两个值之间的数据范围。
BETWEEN 操作符
操作符 BETWEEN ... AND 会选取介于两个值之间的数据范围。这些值可以是数值、文本或者日期。
SQL BETWEEN 语法
SELECT column_name(s)
		FROM table_name
		WHERE column_name
		BETWEEN value1 AND value2
如需使用上面的例子显示范围之外的人，请使用 NOT 操作符：

13. SQL Alias
表的 SQL Alias 语法
SELECT column_name(s)
		FROM table_name
		AS alias_name
		列的 SQL Alias 语法
		SELECT column_name AS alias_name
		FROM table_name

14. SQL join 用于根据两个或多个表中的列之间的关系，从这些表中查询数据。
Join 和 Key
有时为了得到完整的结果，我们需要从两个或更多的表中获取结果。我们就需要执行 join。
数据库中的表可通过键将彼此联系起来。主键（Primary Key）是一个列，在这个列中的每一行的值都是唯一的。在表中，每个主键的值都是唯一的。这样做的目的是在不重复每个表中的所有数据的情况下，把表间的数据交叉捆绑在一起。
不同的 SQL JOIN
除了我们在上面的例子中使用的 INNER JOIN（内连接），我们还可以使用其他几种连接。
下面列出了您可以使用的 JOIN 类型，以及它们之间的差异。
JOIN: 如果表中有至少一个匹配，则返回行
LEFT JOIN: 即使右表中没有匹配，也从左表返回所有的行
RIGHT JOIN: 即使左表中没有匹配，也从右表返回所有的行
FULL JOIN: 只要其中一个表中存在匹配，就返回行

15. SQL INNER JOIN 关键字
在表中存在至少一个匹配时，INNER JOIN 关键字返回行。
INNER JOIN 关键字语法
SELECT column_name(s) FROM table_name1 INNER JOIN table_name2 ON table_name1.column_name=table_name2.column_name
注释：INNER JOIN 与 JOIN 是相同的

16. SQL LEFT JOIN 关键字
LEFT JOIN 关键字会从左表 (table_name1) 那里返回所有的行，即使在右表 (table_name2) 中没有匹配的行。
LEFT JOIN 关键字语法
SELECT column_name(s)
		FROM table_name1
		LEFT JOIN table_name2 
		ON table_name1.column_name=table_name2.column_name
注释：在某些数据库中， LEFT JOIN 称为 LEFT OUTER JOIN。
LEFT JOIN 关键字会从左表 (Persons) 那里返回所有的行，即使在右表 (Orders) 中没有匹配的行。

17. SQL RIGHT JOIN 关键字
RIGHT JOIN 关键字会右表 (table_name2) 那里返回所有的行，即使在左表 (table_name1) 中没有匹配的行。
RIGHT JOIN 关键字语法
SELECT column_name(s)
		FROM table_name1
		RIGHT JOIN table_name2 
		ON table_name1.column_name=table_name2.column_name
注释：在某些数据库中， RIGHT JOIN 称为 RIGHT OUTER JOIN。

18. SQL FULL JOIN 关键字
只要其中某个表存在匹配，FULL JOIN 关键字就会返回行。
FULL JOIN 关键字语法
SELECT column_name(s)
		FROM table_name1
		FULL JOIN table_name2 
		ON table_name1.column_name=table_name2.column_name
注释：在某些数据库中， FULL JOIN 称为 FULL OUTER JOIN。
FULL JOIN 关键字会从左表 (Persons) 和右表 (Orders) 那里返回所有的行。如果 "Persons" 中的行在表 "Orders" 中没有匹配，或者如果 "Orders" 中的行在表 "Persons" 中没有匹配，这些行同样会列出。

19. SQL UNION 操作符
UNION 操作符用于合并两个或多个 SELECT 语句的结果集。
请注意，UNION 内部的 SELECT 语句必须拥有相同数量的列。列也必须拥有相似的数据类型。同时，每条 SELECT 语句中的列的顺序必须相同。
SQL UNION 语法
SELECT column_name(s) FROM table_name1
UNION
SELECT column_name(s) FROM table_name2
注释：默认地，UNION 操作符选取不同的值。如果允许重复的值，请使用 UNION ALL。
SQL UNION ALL 语法
SELECT column_name(s) FROM table_name1
UNION ALL
SELECT column_name(s) FROM table_name2
另外，UNION 结果集中的列名总是等于 UNION 中第一个 SELECT 语句中的列名。

20. SQL SELECT INTO 语句可用于创建表的备份复件。
SELECT INTO 语句
SELECT INTO 语句从一个表中选取数据，然后把数据插入另一个表中。
SELECT INTO 语句常用于创建表的备份复件或者用于对记录进行存档。
SQL SELECT INTO 语法
您可以把所有的列插入新表：
SELECT *
INTO new_table_name [IN externaldatabase] 
FROM old_tablename
或者只把希望的列插入新表：
SELECT column_name(s)
		INTO new_table_name [IN externaldatabase] 
		FROM old_tablename
我们也可以添加 WHERE 子句。
下面的例子通过从 "Persons" 表中提取居住在 "Beijing" 的人的信息，创建了一个带有两个列的名为 "Persons_backup" 的表：
SELECT LastName,Firstname
INTO Persons_backup
FROM Persons
WHERE City='Beijing'
从一个以上的表中选取数据也是可以做到的。 下面的例子会创建一个名为 "Persons_Order_Backup" 的新表，其中包含了从 Persons 和 Orders 两个表中取得的信息：
SELECT Persons.LastName,Orders.OrderNo
INTO Persons_Order_Backup
FROM Persons
INNER JOIN Orders
ON Persons.Id_P=Orders.Id_P

21. 数据类型	描述
integer(size)
int(size)
smallint(size)   仅容纳整数。在括号内规定数字的最大位数。
tinyint(size)    

decimal(size,d)
numeric(size,d)  容纳带有小数的数字。
		         "size" 规定数字的最大位数。"d" 规定小数点右侧的最大位数。

char(size)	     容纳固定长度的字符串（可容纳字母、数字以及特殊字符）。
       		     在括号中规定字符串的长度。

varchar(size)	 容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）。
	    		 在括号中规定字符串的最大长度。

date(yyyymmdd)	 容纳日期

22. SQL 约束
    约束用于限制加入表的数据的类型。
    可以在创建表时规定约束（通过 CREATE TABLE 语句），或者在表创建之后也可以（通过 ALTER TABLE 语句）。
    主要有以下几种约束：
		NOT NULL
		UNIQUE
		PRIMARY KEY
		FOREIGN KEY
		CHECK
		DEFAULT

23. SQL UNIQUE 约束
    UNIQUE 约束唯一标识数据库表中的每条记录。
	UNIQUE 和 PRIMARY KEY 约束均为列或列集合提供了唯一性的保证。
	PRIMARY KEY 拥有自动定义的 UNIQUE 约束。
 	请注意，每个表可以有多个 UNIQUE 约束，但是每个表只能有一个 PRIMARY KEY 约束。
	如果需要命名 UNIQUE 约束，以及为多个列定义 UNIQUE 约束，请使用下面的 SQL 语法：
	MySQL / SQL Server / Oracle / MS Access:
	CREATE TABLE Persons
	(
	 Id_P int NOT NULL,
	 LastName varchar(255) NOT NULL,
	 FirstName varchar(255),
	 Address varchar(255),
	 City varchar(255),
	 CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
	)
    当表已被创建时，如需在 "Id_P" 列创建 UNIQUE 约束，请使用下列 SQL：
		ALTER TABLE Persons
		ADD UNIQUE (Id_P)
	如需命名 UNIQUE 约束，并定义多个列的 UNIQUE 约束，请使用下面的 SQL 语法：
		ALTER TABLE Persons
		ADD CONSTRAINT uc_PersonID UNIQUE (Id_P,LastName)
	撤销 UNIQUE 约束
	如需撤销 UNIQUE 约束，请使用下面的 SQL：
		ALTER TABLE Persons
		DROP INDEX uc_PersonID

24. SQL PRIMARY KEY 约束
	PRIMARY KEY 约束唯一标识数据库表中的每条记录。
	主键必须包含唯一的值。
	主键列不能包含 NULL 值。
	每个表都应该有一个主键，并且每个表只能有一个主键。

	如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束，请使用下面的 SQL 语法：
		CREATE TABLE Persons
		(
		 Id_P int NOT NULL,
		 LastName varchar(255) NOT NULL,
		 FirstName varchar(255),
		 Address varchar(255),
		 City varchar(255),
		 CONSTRAINT pk_PersonID PRIMARY KEY (Id_P,LastName)
		 )
	如果在表已存在的情况下为 "Id_P" 列创建 PRIMARY KEY 约束，请使用下面的 SQL：
		 ALTER TABLE Persons
		 ADD PRIMARY KEY (Id_P)
	如果需要命名 PRIMARY KEY 约束，以及为多个列定义 PRIMARY KEY 约束，请使用下面的 SQL 语法：
		 ALTER TABLE Persons
		 ADD CONSTRAINT pk_PersonID PRIMARY KEY (Id_P,LastName)
	如需撤销 PRIMARY KEY 约束，请使用下面的 SQL：
		ALTER TABLE Persons
		DROP PRIMARY KEY
		或
		ALTER TABLE Persons
		DROP CONSTRAINT pk_PersonID

25. SQL FOREIGN KEY 约束
一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。
FOREIGN KEY 约束用于预防破坏表之间连接的动作。
FOREIGN KEY 约束也能防止非法数据插入外键列，因为它必须是它指向的那个表中的值之一。
SQL FOREIGN KEY Constraint on CREATE TABLE
下面的 SQL 在 "Orders" 表创建时为 "Id_P" 列创建 FOREIGN KEY：
MySQL:
CREATE TABLE Orders
(
 Id_O int NOT NULL,
 OrderNo int NOT NULL,
 Id_P int,
 PRIMARY KEY (Id_O),
 FOREIGN KEY (Id_P) REFERENCES Persons(Id_P)
 )
		SQL Server / Oracle / MS Access:
		CREATE TABLE Orders
		(
		 Id_O int NOT NULL PRIMARY KEY,
		 OrderNo int NOT NULL,
		 Id_P int FOREIGN KEY REFERENCES Persons(Id_P)
		)
		如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束，请使用下面的 SQL 语法：
		MySQL / SQL Server / Oracle / MS Access:
		CREATE TABLE Orders
		(
		 Id_O int NOT NULL,
		 OrderNo int NOT NULL,
		 Id_P int,
		 PRIMARY KEY (Id_O),
		 CONSTRAINT fk_PerOrders FOREIGN KEY (Id_P)
		 REFERENCES Persons(Id_P)
		)
		SQL FOREIGN KEY Constraint on ALTER TABLE
		如果在 "Orders" 表已存在的情况下为 "Id_P" 列创建 FOREIGN KEY 约束，请使用下面的 SQL：
		MySQL / SQL Server / Oracle / MS Access:
		ALTER TABLE Orders
		ADD FOREIGN KEY (Id_P)
		REFERENCES Persons(Id_P)
		如果需要命名 FOREIGN KEY 约束，以及为多个列定义 FOREIGN KEY 约束，请使用下面的 SQL 语法：
		MySQL / SQL Server / Oracle / MS Access:
		ALTER TABLE Orders
		ADD CONSTRAINT fk_PerOrders
		FOREIGN KEY (Id_P)
		REFERENCES Persons(Id_P)
		撤销 FOREIGN KEY 约束
		如需撤销 FOREIGN KEY 约束，请使用下面的 SQL：
		MySQL:
		ALTER TABLE Orders
		DROP FOREIGN KEY fk_PerOrders
		SQL Server / Oracle / MS Access:
		ALTER TABLE Orders
		DROP CONSTRAINT fk_PerOrders

26.	SQL CHECK 约束
		CHECK 约束用于限制列中的值的范围。
		如果对单个列定义 CHECK 约束，那么该列只允许特定的值。
		如果对一个表定义 CHECK 约束，那么此约束会在特定的列中对值进行限制。
		SQL CHECK Constraint on CREATE TABLE
		下面的 SQL 在 "Persons" 表创建时为 "Id_P" 列创建 CHECK 约束。CHECK 约束规定 "Id_P" 列必须只包含大于 0 的整数。
		My SQL:
		CREATE TABLE Persons
		(
		 Id_P int NOT NULL,
		 LastName varchar(255) NOT NULL,
		 FirstName varchar(255),
		 Address varchar(255),
		 City varchar(255),
		 CHECK (Id_P>0)
		)
		SQL Server / Oracle / MS Access:
		CREATE TABLE Persons
		(
		 Id_P int NOT NULL CHECK (Id_P>0),
		 LastName varchar(255) NOT NULL,
		 FirstName varchar(255),
		 Address varchar(255),
		 City varchar(255)
		)
		如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：
		MySQL / SQL Server / Oracle / MS Access:
		CREATE TABLE Persons
		(
		 Id_P int NOT NULL,
		 LastName varchar(255) NOT NULL,
		 FirstName varchar(255),
		 Address varchar(255),
		 City varchar(255),
		 CONSTRAINT chk_Person CHECK (Id_P>0 AND City='Sandnes')
		)
		SQL CHECK Constraint on ALTER TABLE
		如果在表已存在的情况下为 "Id_P" 列创建 CHECK 约束，请使用下面的 SQL：
		MySQL / SQL Server / Oracle / MS Access:
		ALTER TABLE Persons
		ADD CHECK (Id_P>0)
		如果需要命名 CHECK 约束，以及为多个列定义 CHECK 约束，请使用下面的 SQL 语法：
		MySQL / SQL Server / Oracle / MS Access:
		ALTER TABLE Persons
		ADD CONSTRAINT chk_Person CHECK (Id_P>0 AND City='Sandnes')
		撤销 CHECK 约束
		如需撤销 CHECK 约束，请使用下面的 SQL：
		SQL Server / Oracle / MS Access:
		ALTER TABLE Persons
		DROP CONSTRAINT chk_Person
		MySQL:
		ALTER TABLE Persons
		DROP CHECK chk_Person

27. SQL DEFAULT 约束
DEFAULT 约束用于向列中插入默认值。
如果没有规定其他的值，那么会将默认值添加到所有的新记录。
SQL DEFAULT Constraint on CREATE TABLE
下面的 SQL 在 "Persons" 表创建时为 "City" 列创建 DEFAULT 约束：
My SQL / SQL Server / Oracle / MS Access:
CREATE TABLE Persons
(
 Id_P int NOT NULL,
 LastName varchar(255) NOT NULL,
 FirstName varchar(255),
 Address varchar(255),
 City varchar(255) DEFAULT 'Sandnes'
 )
通过使用类似 GETDATE() 这样的函数，DEFAULT 约束也可以用于插入系统值：
CREATE TABLE Orders
(
 Id_O int NOT NULL,
 OrderNo int NOT NULL,
 Id_P int,
 OrderDate date DEFAULT GETDATE()
 )
		SQL DEFAULT Constraint on ALTER TABLE
		如果在表已存在的情况下为 "City" 列创建 DEFAULT 约束，请使用下面的 SQL：
		MySQL:
		ALTER TABLE Persons
		ALTER City SET DEFAULT 'SANDNES'
		SQL Server / Oracle / MS Access:
		ALTER TABLE Persons
		ALTER COLUMN City SET DEFAULT 'SANDNES'
		撤销 DEFAULT 约束
		如需撤销 DEFAULT 约束，请使用下面的 SQL：
		MySQL:
		ALTER TABLE Persons
		ALTER City DROP DEFAULT
		SQL Server / Oracle / MS Access:
		ALTER TABLE Persons
		ALTER COLUMN City DROP DEFAULT

28. CREATE INDEX 语句用于在表中创建索引。
    在不读取整个表的情况下，索引使数据库应用程序可以更快地查找数据。
    您可以在表中创建索引，以便更加快速高效地查询数据。
    用户无法看到索引，它们只能被用来加速搜索/查询。
      注释：更新一个包含索引的表需要比更新一个没有索引的表更多的时间，这是由于索引本身也需要更新。因此，理想的做法是仅仅在常常被搜索的列（以及表）上面创建索引。
	  QL CREATE INDEX 语法
	  在表上创建一个简单的索引。允许使用重复的值：
	  CREATE INDEX index_name
	  ON table_name (column_name)
		注释："column_name" 规定需要索引的列。
		SQL CREATE UNIQUE INDEX 语法
		在表上创建一个唯一的索引。唯一的索引意味着两个行不能拥有相同的索引值。
		CREATE UNIQUE INDEX index_name
		ON table_name (column_name)
		CREATE INDEX 实例
		本例会创建一个简单的索引，名为 "PersonIndex"，在 Person 表的 LastName 列：
		CREATE INDEX PersonIndex
		ON Person (LastName) 
		如果您希望以降序索引某个列中的值，您可以在列名称之后添加保留字 DESC：
		CREATE INDEX PersonIndex
		ON Person (LastName DESC) 
		假如您希望索引不止一个列，您可以在括号中列出这些列的名称，用逗号隔开：
		CREATE INDEX PersonIndex
		ON Person (LastName, FirstName)

29. 通过使用 DROP 语句，可以轻松地删除索引、表和数据库。
SQL DROP INDEX 语句
我们可以使用 DROP INDEX 命令删除表格中的索引。
用于 Microsoft SQLJet (以及 Microsoft Access) 的语法:
DROP INDEX index_name ON table_name
用于 MS SQL Server 的语法:
DROP INDEX table_name.index_name
用于 IBM DB2 和 Oracle 语法:
DROP INDEX index_name
用于 MySQL 的语法:
ALTER TABLE table_name DROP INDEX index_name
SQL DROP TABLE 语句
DROP TABLE 语句用于删除表（表的结构、属性以及索引也会被删除）：
DROP TABLE 表名称
SQL DROP DATABASE 语句
DROP DATABASE 语句用于删除数据库：
DROP DATABASE 数据库名称
SQL TRUNCATE TABLE 语句
如果我们仅仅需要除去表内的数据，但并不删除表本身，那么我们该如何做呢？
请使用 TRUNCATE TABLE 命令（仅仅删除表格中的数据）：
TRUNCATE TABLE 表名称

30. ALTER TABLE 语句
ALTER TABLE 语句用于在已有的表中添加、修改或删除列。
SQL ALTER TABLE 语法
如需在表中添加列，请使用下列语法:
ALTER TABLE table_name
ADD column_name datatype
要删除表中的列，请使用下列语法：
ALTER TABLE table_name 
DROP COLUMN column_name
注释：某些数据库系统不允许这种在数据库表中删除列的方式 (DROP COLUMN column_name)。
要改变表中列的数据类型，请使用下列语法：
ALTER TABLE table_name
ALTER COLUMN column_name datatype
现在我们希望改变 "Persons" 表中 "Birthday" 列的数据类型。
我们使用下列 SQL 语句：
ALTER TABLE Persons
ALTER COLUMN Birthday year
请注意，"Birthday" 列的数据类型是 year，可以存放 2 位或 4 位格式的年份。
接下来，我们删除 "Person" 表中的 "Birthday" 列：
ALTER TABLE Person
DROP COLUMN Birthday

31. AUTO INCREMENT 字段
我们通常希望在每次插入新记录时，自动地创建主键字段的值。
我们可以在表中创建一个 auto-increment 字段。
默认地，AUTO_INCREMENT 的开始值是 1，每条新记录递增 1。
要让 AUTO_INCREMENT 序列以其他的值起始，请使用下列 SQL 语法：
ALTER TABLE Persons AUTO_INCREMENT=100

32. 视图是可视化的表。
   什么是视图？
   在 SQL 中，视图是基于 SQL 语句的结果集的可视化的表。
   视图包含行和列，就像一个真实的表。视图中的字段就是来自一个或多个数据库中的真实的表中的字段。我们可以向视图添加 SQL 函数、WHERE 以及 JOIN 语句，我们也可以提交数据，就像这些来自于某个单一的表。
   注释：数据库的设计和结构不会受到视图中的函数、where 或 join 语句的影响。

   SQL CREATE VIEW 语法
   CREATE VIEW view_name AS
   SELECT column_name(s)
		FROM table_name
		WHERE condition
		注释：视图总是显示最近的数据。每当用户查询视图时，数据库引擎通过使用 SQL 语句来重建数据
		可以从某个查询内部、某个存储过程内部，或者从另一个视图内部来使用视图。通过向视图添加函数、join 等等，我们可以向用户精确地提交我们希望提交的数据。
		您可以使用下面的语法来更新视图：
		SQL CREATE OR REPLACE VIEW Syntax:
		CREATE OR REPLACE VIEW view_name AS
		SELECT column_name(s)
		FROM table_name
		WHERE condition
	SQL 撤销视图
	您可以通过 DROP VIEW 命令来删除视图。
	SQL DROP VIEW Syntax:
	DROP VIEW view_name

33. MySQL Date 函数
下面的表格列出了 MySQL 中最重要的内建日期函数：
函数	描述
NOW()	返回当前的日期和时间
CURDATE()	返回当前的日期
CURTIME()	返回当前的时间
DATE()	提取日期或日期/时间表达式的日期部分
EXTRACT()	返回日期/时间按的单独部分
DATE_ADD()	给日期添加指定的时间间隔
DATE_SUB()	从日期减去指定的时间间隔
DATEDIFF()	返回两个日期之间的天数
DATE_FORMAT()	用不同的格式显示日期/时间

34.  我们如何测试 NULL 值呢？
无法使用比较运算符来测试 NULL 值，比如 =, <, 或者 <>。
我们必须使用 IS NULL 和 IS NOT NULL 操作符
SELECT LastName,FirstName,Address FROM Persons
WHERE Address IS NULL

35. MySQL 数据类型
在 MySQL 中，有三种主要的类型：文本、数字和日期/时间类型。
Text 类型：
数据类型	描述
CHAR(size)	保存固定长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的长度。最多 255 个字符。
VARCHAR(size)	
		保存可变长度的字符串（可包含字母、数字以及特殊字符）。在括号中指定字符串的最大长度。最多 255 个字符。
		注释：如果值的长度大于 255，则被转换为 TEXT 类型。
		TINYTEXT	存放最大长度为 255 个字符的字符串。
		TEXT	存放最大长度为 65,535 个字符的字符串。
		BLOB	用于 BLOBs (Binary Large OBjects)。存放最多 65,535 字节的数据。
		MEDIUMTEXT	存放最大长度为 16,777,215 个字符的字符串。
		MEDIUMBLOB	用于 BLOBs (Binary Large OBjects)。存放最多 16,777,215 字节的数据。
		LONGTEXT	存放最大长度为 4,294,967,295 个字符的字符串。
		LONGBLOB	用于 BLOBs (Binary Large OBjects)。存放最多 4,294,967,295 字节的数据。
		ENUM(x,y,z,etc.)	
		允许你输入可能值的列表。可以在 ENUM 列表中列出最大 65535 个值。如果列表中不存在插入的值，则插入空值。
		注释：这些值是按照你输入的顺序存储的。
		可以按照此格式输入可能的值：ENUM('X','Y','Z')
		SET	与 ENUM 类似，SET 最多只能包含 64 个列表项，不过 SET 可存储一个以上的值。
		Number 类型：
		数据类型	描述
		TINYINT(size)	-128 到 127 常规。0 到 255 无符号*。在括号中规定最大位数。
		SMALLINT(size)	-32768 到 32767 常规。0 到 65535 无符号*。在括号中规定最大位数。
		MEDIUMINT(size)	-8388608 到 8388607 普通。0 to 16777215 无符号*。在括号中规定最大位数。
		INT(size)	-2147483648 到 2147483647 常规。0 到 4294967295 无符号*。在括号中规定最大位数。
		BIGINT(size)	-9223372036854775808 到 9223372036854775807 常规。0 到 18446744073709551615 无符号*。在括号中规定最大位数。
		FLOAT(size,d)	带有浮动小数点的小数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。
		DOUBLE(size,d)	带有浮动小数点的大数字。在括号中规定最大位数。在 d 参数中规定小数点右侧的最大位数。
		DECIMAL(size,d)	作为字符串存储的 DOUBLE 类型，允许固定的小数点。
		* 这些整数类型拥有额外的选项 UNSIGNED。通常，整数可以是负数或正数。如果添加 UNSIGNED 属性，那么范围将从 0 开始，而不是某个负数。
		Date 类型：
		数据类型	描述
		DATE()	
		日期。格式：YYYY-MM-DD
		注释：支持的范围是从 '1000-01-01' 到 '9999-12-31'
		DATETIME()	
		*日期和时间的组合。格式：YYYY-MM-DD HH:MM:SS
		注释：支持的范围是从 '1000-01-01 00:00:00' 到 '9999-12-31 23:59:59'
		TIMESTAMP()	
		*时间戳。TIMESTAMP 值使用 Unix 纪元('1970-01-01 00:00:00' UTC) 至今的描述来存储。格式：YYYY-MM-DD HH:MM:SS
		注释：支持的范围是从 '1970-01-01 00:00:01' UTC 到 '2038-01-09 03:14:07' UTC
		TIME()	 时间。格式：HH:MM:SS 注释：支持的范围是从 '-838:59:59' 到 '838:59:59'
		YEAR()	
		2 位或 4 位格式的年。
		注释：4 位格式所允许的值：1901 到 2155。2 位格式所允许的值：70 到 69，表示从 1970 到 2069。
		* 即便 DATETIME 和 TIMESTAMP 返回相同的格式，它们的工作方式很不同。在 INSERT 或 UPDATE 查询中，TIMESTAMP 自动把自身设置为当前的日期和时间。TIMESTAMP 也接受不同的格式，比如 YYYYMMDDHHMMSS、YYMMDDHHMMSS、YYYYMMDD 或 YYMMDD。

36. SQL 拥有很多可用于计数和计算的内建函数。
函数的语法
内建 SQL 函数的语法是：
SELECT function(列) FROM 表
函数的类型
在 SQL 中，基本的函数类型和种类有若干种。函数的基本类型是：
Aggregate 函数
Scalar 函数
合计函数（Aggregate functions）
Aggregate 函数的操作面向一系列的值，并返回一个单一的值。
注释：如果在 SELECT 语句的项目列表中的众多其它表达式中使用 SELECT 语句，则这个 SELECT 必须使用 GROUP BY 语句！
calar 函数
    SQL Server 中的合计函数
	函数			描述
	AVG(column)		返回某列的平均值
	BINARY_CHECKSUM	 
	CHECKSUM	 
	CHECKSUM_AGG	 
	COUNT(column)	返回某列的行数（不包括NULL值）
	COUNT(*)		返回被选行数
	COUNT(DISTINCT column)	返回相异结果的数目
	FIRST(column)	返回在指定的域中第一个记录的值（SQLServer2000 不支持）
	LAST(column)	返回在指定的域中最后一个记录的值（SQLServer2000 不支持）
	MAX(column)		返回某列的最高值
	MIN(column)		返回某列的最低值
	STDEV(column)	 
	STDEVP(column)	 
	SUM(column)		返回某列的总和
	VAR(column)	 
	VARP(column)
Scalar 函数的操作面向某个单一的值，并返回基于输入值的一个单一的值。
	MS Access 中的 Scalar 函数
	函数			描述
	UCASE(c)		将某个域转换为大写
	LCASE(c)		将某个域转换为小写
	MID(c,start[,end])	从某个文本域提取字符
	LEN(c)			返回某个文本域的长度
	INSTR(c,char)	返回在某个文本域中指定字符的数值位置
	LEFT(c,number_of_char)	返回某个被请求的文本域的左侧部分
	RIGHT(c,number_of_char)	返回某个被请求的文本域的右侧部分
	ROUND(c,decimals)	对某个数值域进行指定小数位数的四舍五入
	MOD(x,y)		返回除法操作的余数
	NOW()			返回当前的系统日期
	FORMAT(c,format)	改变某个域的显示方式
	DATEDIFF(d,date1,date2)	用于执行日期计算

37. AVG 函数返回数值列的平均值。NULL 值不包括在计算中。
	SQL AVG() 语法:
		SELECT AVG(column_name) FROM table_name

38. COUNT() 函数返回匹配指定条件的行数。
	SQL COUNT() 语法:
		SQL COUNT(column_name) 语法:
			COUNT(column_name) 函数返回指定列的值的数目（NULL 不计入）：
				SELECT COUNT(column_name) FROM table_name
		SQL COUNT(*) 语法:
			COUNT(*) 函数返回表中的记录数：
				SELECT COUNT(*) FROM table_name
		SQL COUNT(DISTINCT column_name) 语法:
			COUNT(DISTINCT column_name) 函数返回指定列的不同值的数目：
				SELECT COUNT(DISTINCT column_name) FROM table_name

39. FIRST() 函数返回指定的字段中第一个记录的值。
	提示：可使用 ORDER BY 语句对记录进行排序。
	SQL FIRST() 语法:
		SELECT FIRST(column_name) FROM table_name

40. LAST() 函数返回指定的字段中最后一个记录的值。
	提示：可使用 ORDER BY 语句对记录进行排序。
	SQL LAST() 语法:
		SELECT LAST(column_name) FROM table_name

41. MAX 函数返回一列中的最大值。NULL 值不包括在计算中。
	SQL MAX() 语法:
		SELECT MAX(column_name) FROM table_name
	注释：MIN 和 MAX 也可用于文本列，以获得按字母顺序排列的最高或最低值。

42. SUM 函数返回数值列的总数（总额）。
	SQL SUM() 语法:
		SELECT SUM(column_name) FROM table_name

43. GROUP BY 语句
	GROUP BY 语句用于结合合计函数，根据一个或多个列对结果集进行分组。
	SQL GROUP BY 语法:
		SELECT column_name, aggregate_function(column_name)
			FROM table_name
			WHERE column_name operator value
			GROUP BY column_name

44. HAVING 子句
	在 SQL 中增加 HAVING 子句原因是，WHERE 关键字无法与合计函数一起使用。
	SQL HAVING 语法:
		SELECT column_name, aggregate_function(column_name)
			FROM table_name
			WHERE column_name operator value
			GROUP BY column_name
			HAVING aggregate_function(column_name) operator value
    如：
	   SELECT City, COUNT(DISTINCT City) Num FROM Persons GROUP BY City HAVING COUNT(DISTINCT City)>0; //纪录中某城市居住有人才输出

45. UCASE 函数把字段的值转换为大写。
	SQL UCASE() 语法:
		SELECT UCASE(column_name) FROM table_name

46. LCASE() 函数
	LCASE 函数把字段的值转换为小写。
	SQL LCASE() 语法:
		SELECT LCASE(column_name) FROM table_name

47. MID 函数用于从文本字段中提取字符。
	SQL MID() 语法:
		SELECT MID(column_name,start[,length]) FROM table_name
			参数			描述
			column_name		必需。要提取字符的字段。
			start			必需。规定开始位置（起始值是 1）。
			length			可选。要返回的字符数。如果省略，则 MID() 函数返回剩余文本。

48. LEN 函数返回文本字段中值的长度。
	SQL LEN() 语法:
		SELECT LEN(column_name) FROM table_name

49. ROUND 函数用于把数值字段舍入为指定的小数位数。
	SQL ROUND() 语法
		SELECT ROUND(column_name,decimals) FROM table_name

50. NOW 函数返回当前的日期和时间。
提示：如果您在使用 Sql Server 数据库，请使用 getdate() 函数来获得当前的日期时间。
	SQL NOW() 语法:
		SELECT NOW() FROM table_name
	如：SELECT ProductName, UnitPrice, Now() as PerDate FROM Products

51. FORMAT 函数用于对字段的显示进行格式化。
	SQL FORMAT() 语法:
		SELECT FORMAT(column_name,format) FROM table_name
		参数			描述
		column_name		必需。要格式化的字段。
		format			必需。规定格式。
	如：SELECT ProductName, UnitPrice, FORMAT(Now(),'YYYY-MM-DD') as PerDate
	FROM Products

