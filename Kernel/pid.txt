1. PID散列表
   PID散列表是在系统启动过程中通过pidhash_init(被start_kernel函数所调用)所创建的，实际上就是一个像struct hlist_head pid_hash[i]这样的数组，其中i的大小由alloc_large_system_hash函数所确定，最大值取值为4096,最步值为16。
   其中alloc_large_system_hash函数能够根据机器物理内在的大小灵活地分配散列表的存储空间，以及改变pidhash_shift变量的默认值（默认值为4），从而确定pid_hash数组的大小。
   最后，pidhash_init函数通过宏INIT_HLIST_HEAD把pid_hash数组的每个元素都初始化为空指针。

2. 散列函数
  PID散列表的散列函数为pid_hashfn，定义在kernel/pid.c文件中。
  散列函数pid_hashfn先使关键字(nr和ns的和)乘以0x9e370001UL，然后取乘积的低pidhash_shift位(即bit[0]到bit[pidhash_shift-1]）。

3. 处理冲突
   PID散列表采用链地址法来处理冲突。

4. PID散列表的运算函数
   在介绍PID散列表的运算函数之前，先介绍一下相关的结构体。
   struct pid是内核对PID的内部表示，而struct upid则表示特定的命名空间中可见的信息。
   在struct upid中，nr表示ID的数值，ns是指向该ID所属命名空间的指针，所有的upid实例都通过pid_chain成员链接到pid_hash散列表中。
   在struct pid中，count表示一个引用计数器，level表示该进程的命令空间在命名空间层次结构中的深度，而numbers是一个struct upid实例的数组，每个数组项都对应着一个命名空间。Tasks是共享此struct pid实例的所有进程的链表表头，其中的进程通过它的pids[type]成员来构建链接。在linux内核中，通过attach_pid函数来建立它们之间的链接。
   在linux内核中，使用过散列函数pid_hashfn的只有alloc_pid和find_pid_ns两个函数而已。
